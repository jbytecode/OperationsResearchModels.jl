var documenterSearchIndex = {"docs":
[{"location":"scheduling/#Scheduling-Problems","page":"Scheduling","title":"Scheduling Problems","text":"","category":"section"},{"location":"scheduling/#Johnson's-Rule-for-Flow-shop-Scheduling","page":"Scheduling","title":"Johnson's Rule for Flow-shop Scheduling","text":"","category":"section"},{"location":"scheduling/#OperationsResearchModels.Johnsons.johnsons","page":"Scheduling","title":"OperationsResearchModels.Johnsons.johnsons","text":"johnsons(times::Matrix)\n\nGiven a matrix of times, returns a JohnsonResult with the permutation of the jobs.  If number of machines is 2, it uses the Johnson's algorithm for 2 machines. If number of machines is greater than 2, it uses the Johnson's algorithm by transforming the  problem into a 2-machine problem. In order to reduce the original problem to a 2-machine problem, the algorithm checks if the minimum time of the first machine is greater or equal than the maximum time of the other machines and/or if the minimum time of the  last machine is greater or equal than the maximum time of the other machines.\n\nFor example if we have 4 machines, namely, A, B, C, and D  at least one of the following conditions must be satisfied:\n\nmin(A) >= max(B, C)\nmin(D) >= max(B, C)\n\nThe function throws a JohnsonException if the problem cannot be reduced to a 2-machine problem.\n\nArguments\n\ntimes::Matrix: a matrix of times\n\nReturns\n\nJohnsonResult: a custom data type that holds the permutation of the jobs\n\nExample\n\ntimes = Float64[\n    3.1 2.8;\n    4.0 7.0;\n    8.0 3.0;\n    5.0 8.0;\n    6.0 4.0;\n    8.0 5.0;\n    7.0 4.0\n]\n\nresult = johnsons(times)\n\nprintln(result.permutation)\n\n\n\n\n\n","category":"function"},{"location":"scheduling/#Genetic-Algorithm-for-the-problems-that-cannot-be-solved-with-using-Johnson's-Rule","page":"Scheduling","title":"Genetic Algorithm for the problems that cannot be solved with using Johnson's Rule","text":"","category":"section"},{"location":"scheduling/#OperationsResearchModels.Johnsons.johnsons_ga","page":"Scheduling","title":"OperationsResearchModels.Johnsons.johnsons_ga","text":"johnsons_ga(times::Matrix; popsize = 100, ngen = 1000, pcross = 0.8, pmutate = 0.01, nelites = 1)::JohnsonResult\n\nGiven a matrix of times, returns a JohnsonResult with the permutation of the jobs. The function uses a genetic algorithm to find the best permutation of the jobs.  The genetic algorithm is implemented in the RandomKeyGA module.\n\nArguments\n\ntimes::Matrix: a matrix of times\npopsize::Int: the population size. Default is 100\nngen::Int: the number of generations. Default is 1000\npcross::Float64: the crossover probability. Default is 0.8\npmutate::Float64: the mutation probability. Default is 0.01\nnelites::Int: the number of elites. Default is 1\n\nReturns\n\nJohnsonResult: a custom data type that holds the permutation of the jobs\n\nExample\n\ntimes = Float64[\n    3.1 2.8;\n    4.0 7.0;\n    8.0 3.0;\n    5.0 8.0;\n    6.0 4.0;\n    8.0 5.0;\n    7.0 4.0\n]\n\nresult = johnsons(times)\n\nprintln(result.permutation)\n\n\n\n\n\n","category":"function"},{"location":"scheduling/#Makespan","page":"Scheduling","title":"Makespan","text":"","category":"section"},{"location":"scheduling/#OperationsResearchModels.Johnsons.makespan","page":"Scheduling","title":"OperationsResearchModels.Johnsons.makespan","text":"makespan(times::Matrix, permutation::Vector{Int})\n\nGiven a matrix of times and a permutation of the jobs, returns the makespan of the jobs.\n\nArguments\n\ntimes::Matrix: a matrix of times\npermutation::Vector{Int}: a permutation of the jobs\n\nReturns\n\nFloat64: the makespan of the jobs\n\nExample\n\n\njulia> times = Float64[\n    3 3 5;\n    8 4 8;\n    7 2 10;\n    5 1 7;\n    2 5 6    \n]\n\njulia> result = makespan(times, [1, 4, 5, 3, 2])\n\n\n\n\n\n","category":"function"},{"location":"knapsack/#The-Classical-Knapsack-Problem-Solver","page":"Knapsack","title":"The Classical Knapsack Problem Solver","text":"","category":"section"},{"location":"knapsack/#KnapsackProblem","page":"Knapsack","title":"KnapsackProblem","text":"","category":"section"},{"location":"knapsack/#OperationsResearchModels.Knapsack.KnapsackProblem","page":"Knapsack","title":"OperationsResearchModels.Knapsack.KnapsackProblem","text":"knapsack(values::Vector{Float64}, weights::Vector{Float64}, capacity::Float64)::KnapsackResult\n\nDescription\n\nDefines the knapsack problem.\n\nFields\n\nvalues::Vector{Float64}: The values of the items.\nweights::Vector{Float64}: The weights of the items.\ncapacity::Float64: The maximum capacity of the knapsack.\n\nOutput\n\nKnapsackResult: The custom data type that holds selected items, model, and objective value.\n\n\n\n\n\n","category":"type"},{"location":"knapsack/#The-Solver","page":"Knapsack","title":"The Solver","text":"","category":"section"},{"location":"knapsack/#OperationsResearchModels.solve-Tuple{KnapsackProblem}","page":"Knapsack","title":"OperationsResearchModels.solve","text":"solve(problem::KnapsackProblem)::KnapsackResult\n\nDescription\n\nSolves the knapsack problem.\n\nArguments\n\nproblem::KnapsackProblem: The problem in type of KnapsackProblem.\n\nOutput\n\nKnapsackResult: The custom data type that holds selected items, model, and objective value.\n\nExample\n\njulia> values = [10, 20, 30, 40, 50];\njulia> weights = [1, 2, 3, 4, 5];\njulia> capacity = 10;\njulia> solve(KnapsackProblem(values, weights, capacity));\n\n\n\n\n\n","category":"method"},{"location":"knapsack/#KnapsackResult","page":"Knapsack","title":"KnapsackResult","text":"","category":"section"},{"location":"knapsack/#OperationsResearchModels.Knapsack.KnapsackResult","page":"Knapsack","title":"OperationsResearchModels.Knapsack.KnapsackResult","text":"KnapsackResult\n\nDescription\n\nA structure to hold the result of the knapsack problem.\n\nFields\n\nselected: A vector of booleans indicating which items are selected.\nmodel: The JuMP model used to solve the problem.\nobjective: The objective value of the model.\n\n\n\n\n\n","category":"type"},{"location":"simplex/#The-Simplex-Method","page":"The Simplex Method","title":"The Simplex Method","text":"","category":"section"},{"location":"simplex/#Simplex","page":"The Simplex Method","title":"Simplex","text":"","category":"section"},{"location":"simplex/#OperationsResearchModels.Simplex.createsimplexproblem","page":"The Simplex Method","title":"OperationsResearchModels.Simplex.createsimplexproblem","text":"createsimplexproblem(obj::Vector, amat::Matrix, rhs::Vector, dir::Vector, opttype::OptimizationType)::SimplexProblem\n\nDescription:\n\nThis function creates a SimplexProblem object from the given parameters.\n\nArguments:\n\nobj::Vector: The objective function coefficients.\namat::Matrix: The LHS of the constraints.\nrhs::Vector: The RHS of the constraints.\ndir::Vector: The directions of the constraints. Can be a vector of LE (<=), GE (>=), or EQ (==).\nopttype::OptimizationType: The type of the optimization. Can be Maximize or Minimize.\n\nReturns:\n\nA SimplexProblem object.\n\nExample:\n\nSuppose the linear programming problem is as follows:\n\nMaximize: 1.0x1 + 2.0x2 + 3.0x3\nSubject to:\n1.0x1 + 2.0x2 + 3.0x3 <= 10.0\n3.0x1 + 1.0x2 + 5.0x3 <= 15.0\nx1, x2 >= 0\n\nThe following code creates a SimplexProblem object for the above problem:\n\nusing OperationsResearch.Simplex\n\nobj = Float64[1.0, 2.0, 3.0]\namat = Float64[1.0 2.0 3.0; 3.0 1.0 5.0]\nrhs = Float64[10.0, 15.0]\ndir = [LE, LE]\nopttype = Maximize\n\ns = createsimplexproblem(obj, amat, rhs, dir, opttype)\niters = simplexiterations(s)\n\n\n\n\n\n","category":"function"},{"location":"simplex/#Gauss-Jordan-steps-for-matrix-inversion","page":"The Simplex Method","title":"Gauss Jordan steps for matrix inversion","text":"","category":"section"},{"location":"simplex/#OperationsResearchModels.Simplex.gaussjordan","page":"The Simplex Method","title":"OperationsResearchModels.Simplex.gaussjordan","text":"gaussjordan(A::Matrix; verbose::Bool = true)::Matrix\n\nDescription:\n\nAttaches an Identity matrix to the right of the given matrix A and applies the Gauss-Jordan elimination method to find the inverse of the given matrix.\n\nArguments:\n\nA::Matrix: The matrix to find the inverse.\nverbose::Bool: If true, the intermediate steps are displayed. Default is true.\n\nReturns:\n\nThe inverse of the given matrix.\n\nExample:\n\njulia> A = [1.0 2.0 3.0; 4.0 5.0 6.0; 7.0 8.0 10.0]\njulia> invA = gaussjordan(A, verbose = false)\n3Ã—3 Matrix{Float64}:\n -0.666667  -1.33333   1.0\n -0.666667   3.66667  -2.0\n  1.0       -2.0       1.0\n\n\n\n\n\n","category":"function"},{"location":"assignment/#Assignment-Problem","page":"Assignment","title":"Assignment Problem","text":"","category":"section"},{"location":"assignment/#AssignmentProblem","page":"Assignment","title":"AssignmentProblem","text":"","category":"section"},{"location":"assignment/#OperationsResearchModels.Assignment.AssignmentProblem","page":"Assignment","title":"OperationsResearchModels.Assignment.AssignmentProblem","text":"AssignmentProblem\n\nArguments\n\ncosts::Matrix{T}: The cost matrix of the assignment problem.\n\nDescription\n\nThe AssignmentProblem struct represents an assignment problem with a cost matrix.\n\n\n\n\n\n","category":"type"},{"location":"assignment/#Assignment-Problem-Solver","page":"Assignment","title":"Assignment Problem Solver","text":"","category":"section"},{"location":"assignment/#OperationsResearchModels.solve-Tuple{AssignmentProblem}","page":"Assignment","title":"OperationsResearchModels.solve","text":"solve(a)\n\nArguments\n\na::AssignmentProblem: The problem in type of AssignmentProblem\n\nOutput\n\nAssignmentResult: The custom data type that holds problem, solution, and optimum cost. \n\nDescription\n\nSolves an assignment problem given by an object of in type AssignmentProblem.\n\nExample\n\njulia> mat = [\n                   4 8 1;\n                   3 1 9;\n                   1 6 7;\n               ];\n\njulia> problem = AssignmentProblem(mat);\n\njulia> result = solve(problem);\n\njulia> result.solution\n\n3Ã—3 Matrix{Float64}:\n 0.0  0.0  1.0\n 0.0  1.0  0.0\n 1.0  0.0  0.0\n\njulia> result.cost\n\n3.0\n\n\n\n\n\n","category":"method"},{"location":"assignment/#AssignmentResult","page":"Assignment","title":"AssignmentResult","text":"","category":"section"},{"location":"assignment/#OperationsResearchModels.Assignment.AssignmentResult","page":"Assignment","title":"OperationsResearchModels.Assignment.AssignmentResult","text":"AssignmentResult(problem, solution, cost)\n\nArguments\n\nproblem::AssignmentProblem: The original assignment problem.\nsolution::Matrix: The solution matrix of the assignment problem.\ncost::Real: The optimal cost of the assignment.\n\nDescription\n\nThe AssignmentResult struct represents the result of solving an assignment problem. It contains the original problem, the solution matrix, and the optimal cost.\n\n\n\n\n\n","category":"type"},{"location":"network/#Network-Models","page":"Network","title":"Network Models","text":"","category":"section"},{"location":"network/#Shortest-Path","page":"Network","title":"Shortest Path","text":"","category":"section"},{"location":"network/#OperationsResearchModels.solve-Tuple{ShortestPathProblem}","page":"Network","title":"OperationsResearchModels.solve","text":"solve(problem)\n\nDescription\n\nSolves a shortest path problem given by an object of in type ShortestPathProblem.\n\nArguments\n\nproblem::ShortestPathProblem: The problem in type of ShortestPathProblem\n\nOutput\n\nShortestPathResult: The custom data type that holds path and cost.\n\nExample\n\njulia> conns = [\n                   Connection(1, 2, 3),\n                   Connection(1, 3, 2),\n                   Connection(1, 4, 4),\n                   Connection(2, 5, 3),\n                   Connection(3, 5, 1),\n                   Connection(3, 6, 1),\n                   Connection(4, 6, 2),\n                   Connection(5, 7, 6),\n                   Connection(6, 7, 5),\n               ];\n\njulia> solve(ShortestPathProblem(conns));\n\njulia> result.path\n3-element Vector{Connection}:\n Connection(1, 3, 2, \"x13\")\n Connection(3, 6, 1, \"x36\")\n Connection(6, 7, 5, \"x67\")\n\njulia> result.cost\n8.0\n\n\n\n\n\n","category":"method"},{"location":"network/#Maximum-Flow","page":"Network","title":"Maximum Flow","text":"","category":"section"},{"location":"network/#OperationsResearchModels.solve-Tuple{MaximumFlowProblem}","page":"Network","title":"OperationsResearchModels.solve","text":"solve(problem)\n\nArguments\n\nproblem::MaximumFlowProblem: The problem in type of MaximumFlowProblem\n\nOutput\n\nMaximumFlowResult: The custom data type that holds path and flow.\n\nExample\n\njulia> conns = [\n                   Connection(1, 2, 3),\n                   Connection(1, 3, 2),\n                   Connection(1, 4, 4),\n                   Connection(2, 5, 3),\n                   Connection(3, 5, 1),\n                   Connection(3, 6, 1),\n                   Connection(4, 6, 2),\n                   Connection(5, 7, 6),\n                   Connection(6, 7, 5),\n               ];\njulia> problem = MaximumFlowProblem(conns)\njulia> result = solve(problem);\n\njulia> result.path\n9-element Vector{Connection}:\n Connection(1, 2, 3.0, \"x12\")\n Connection(1, 3, 2.0, \"x13\")\n Connection(1, 4, 2.0, \"x14\")\n Connection(2, 5, 3.0, \"x25\")\n Connection(3, 5, 1.0, \"x35\")\n Connection(3, 6, 1.0, \"x36\")\n Connection(4, 6, 2.0, \"x46\")\n Connection(5, 7, 4.0, \"x57\")\n Connection(6, 7, 3.0, \"x67\")\n\njulia> result.flow\n7.0\n\n\n\n\n\n","category":"method"},{"location":"network/#Minimum-Cost-Flow","page":"Network","title":"Minimum Cost Flow","text":"","category":"section"},{"location":"network/#OperationsResearchModels.solve-Tuple{MinimumCostFlowProblem}","page":"Network","title":"OperationsResearchModels.solve","text":"solve(problem)\n\nDescription\n\nThis function solves the Minimum Cost Flow problem by first solving the Maximum Flow problem and  then using the flow value to solve the Minimum Cost Flow problem.\n\nArguments\n\nproblem::MinimumCostFlowProblem: The problem in type of MinimumCostFlowProblem\n\n\n\n\n\n","category":"method"},{"location":"network/#OperationsResearchModels.solve-Tuple{MinimumCostFlowProblem, Float64}","page":"Network","title":"OperationsResearchModels.solve","text":"solve(problem, flow)\n\nDescription\n\nThis function solves the Minimum Cost Flow problem given a flow value.\n\nArguments\n\nproblem::MinimumCostFlowProblem: The problem in type of MinimumCostFlowProblem\nflow::Float64: The flow value to be used in the problem.\n\n\n\n\n\n","category":"method"},{"location":"network/#Minimum-Spanning-Tree","page":"Network","title":"Minimum Spanning Tree","text":"","category":"section"},{"location":"network/#OperationsResearchModels.solve-Tuple{MstProblem}","page":"Network","title":"OperationsResearchModels.solve","text":"solve(problem::MstProblem)\n\nArguments\n\nproblem::MstProblem: The problem in type of MstProblem\n\nDescription\n\nObtains the minimum spanning tree. \n\nOutput\n\n::MstResult: A MstResult object that holds the results. \n\nExamples\n\njulia> conns = Connection[\n                       Connection(1, 2, 10),\n                       Connection(2, 3, 10),\n                       Connection(3, 4, 10),\n                       Connection(1, 4, 10)\n                   ]\n\n4-element Vector{Connection}:\n Connection(1, 2, 10, \"x12\")\n Connection(2, 3, 10, \"x23\")\n Connection(3, 4, 10, \"x34\")\n Connection(1, 4, 10, \"x14\")\n\n julia> result = solve(MstProblem(conns))\n MstResult(Connection[Connection(3, 4, 10, \"x34\"), Connection(1, 4, 10, \"x14\"), Connection(2, 3, 10, \"x23\")], 30.0)\n \n julia> result.distance\n 30.0\n \n julia> result.connections\n 3-element Vector{Connection}:\n  Connection(3, 4, 10, \"x34\")\n  Connection(1, 4, 10, \"x14\")\n  Connection(2, 3, 10, \"x23\")\n\n\n\n\n\n","category":"method"},{"location":"game/#Zero-Sum-Games","page":"Zero-sum Games","title":"Zero-Sum Games","text":"","category":"section"},{"location":"game/#Game-solver-for-the-row-player","page":"Zero-sum Games","title":"Game solver for the row player","text":"","category":"section"},{"location":"game/#OperationsResearchModels.Game.game","page":"Zero-sum Games","title":"OperationsResearchModels.Game.game","text":"game(decisionMatrix::Matrix{<:Real}; verbose::Bool = false)::Vector{GameResult}\n\nSolves a zero-sum game using the simplex method.\n\nArguments\n\ndecisionMatrix: The payoff matrix of the game.\nverbose: If true, prints the model information.\n\nReturns\n\nAn array of GameResult objects containing the probabilities and value of the game.\n\n\n\n\n\n","category":"function"},{"location":"game/#Game-solver-for-both-the-row-and-the-column-players","page":"Zero-sum Games","title":"Game solver for both the row and the column players","text":"","category":"section"},{"location":"game/#OperationsResearchModels.Game.game_solver","page":"Zero-sum Games","title":"OperationsResearchModels.Game.game_solver","text":"game_solver(gamematrix::Matrix{<:Real}; verbose::Bool = false)::GameResult\n\nSolves a zero-sum game using the simplex method.\n\nArguments\n\ngamematrix: The payoff matrix of the game.\nverbose: If true, prints the model information.\n\nReturns\n\nA GameResult object containing the probabilities and value of the game.\n\n\n\n\n\n","category":"function"},{"location":"game/#GameResult","page":"Zero-sum Games","title":"GameResult","text":"","category":"section"},{"location":"game/#OperationsResearchModels.Game.GameResult","page":"Zero-sum Games","title":"OperationsResearchModels.Game.GameResult","text":"GameResult\n\nDescription\n\nA structure to hold the result of a game.\n\nFields\n\nprobabilities: Probabilities of the strategies\nvalue:         Value of the game\n\nend\n\n\n\n\n\n","category":"type"},{"location":"project/#Project-Analysis","page":"Project Analysis","title":"Project Analysis","text":"","category":"section"},{"location":"project/#CPM-(Critical-Path-Method)","page":"Project Analysis","title":"CPM (Critical Path Method)","text":"","category":"section"},{"location":"project/#OperationsResearchModels.solve-Tuple{CpmProblem}","page":"Project Analysis","title":"OperationsResearchModels.solve","text":"solve(problem)\n\nArguments\n\nproblem::CpmProblem: The problem in type of CpmProblem.\n\nOutput\n\n::CpmResult: The object holds the results \n\nDescription\n\nCalculates CPM (Critical Path Method) and reports the critical path for a given set of activities. \n\nExample\n\njulia> A = CpmActivity(\"A\", 2);\njulia> B = CpmActivity(\"B\", 3);\njulia> C = CpmActivity(\"C\", 2, [A]);\njulia> D = CpmActivity(\"D\", 3, [B]);\njulia> E = CpmActivity(\"E\", 2, [B]);\njulia> F = CpmActivity(\"F\", 3, [C, D]);\njulia> G = CpmActivity(\"G\", 7, [E]);\njulia> H = CpmActivity(\"H\", 5, [E]);\njulia> I = CpmActivity(\"I\", 6, [G, F]);\njulia> J = CpmActivity(\"J\", 2, [C, D]);\n\njulia> activities = [A, B, C, D, E, F, G, H, I, J];\n\njulia> problem = CpmProblem(activities);\n\njulia> result = solve(problem);\n\njulia> result.pathstr\n4-element Vector{String}:\n \"B\"\n \"E\"\n \"G\"\n \"I\"\n\n julia> result.path == [B, E, G, I]\ntrue\n\n\n\n\n\n","category":"method"},{"location":"project/#CPM-Activity","page":"Project Analysis","title":"CPM Activity","text":"","category":"section"},{"location":"project/#OperationsResearchModels.CPM.CpmActivity","page":"Project Analysis","title":"OperationsResearchModels.CPM.CpmActivity","text":"CpmActivity(name::String, time::Float64, dependencies)\n\nDescription\n\nThe object that represents an activity in CPM (Critical Path Method).\n\nArguments\n\nname::String: The name of the activity.\ntime::Float64: The time of the activity.\ndependencies: The dependencies of the activity in type of Vector{CpmActivity}.\n\nExample\n\njulia> A = CpmActivity(\"A\", 2, []);\n\njulia> B = CpmActivity(\"B\", 3, []);\n\njulia> C = CpmActivity(\"C\", 2, [A, B]);\n\n\n\n\n\n\n","category":"type"},{"location":"project/#PERT-(Project-Evaluation-and-Review-Technique)","page":"Project Analysis","title":"PERT (Project Evaluation and Review Technique)","text":"","category":"section"},{"location":"project/#OperationsResearchModels.solve-Tuple{PertProblem}","page":"Project Analysis","title":"OperationsResearchModels.solve","text":"solve(problem::PertProblem)::PertResult\n\nArguments\n\nproblem::PertProblem: The problem in type of PertProblem.\n\nExample\n\njulia> A = PertActivity(\"A\", 1, 2, 3)\nPertActivity(\"A\", 1.0, 2.0, 3.0, PertActivity[])\n\njulia> B = PertActivity(\"B\", 3, 3, 3)\nPertActivity(\"B\", 3.0, 3.0, 3.0, PertActivity[])\n\njulia> C = PertActivity(\"C\", 5, 5, 5, [A, B])\nPertActivity(\"C\", 5.0, 5.0, 5.0, PertActivity[PertActivity(\"A\", 1.0, 2.0, 3.0, PertActivity[]), PertActivity(\"B\", 3.0, 3.0, 3.0, PertActivity[])])\n\njulia> activities = [A, B, C]\n3-element Vector{PertActivity}:\n PertActivity(\"A\", 1.0, 2.0, 3.0, PertActivity[])\n PertActivity(\"B\", 3.0, 3.0, 3.0, PertActivity[])\n PertActivity(\"C\", 5.0, 5.0, 5.0, PertActivity[PertActivity(\"A\", 1.0, 2.0, 3.0, PertActivity[]), PertActivity(\"B\", 3.0, 3.0, 3.0, PertActivity[])])\n\njulia> problem = PertProblem(activities);\n\njulia> result = pert(activities)\nPertResult(PertActivity[PertActivity(\"B\", 3.0, 3.0, 3.0, PertActivity[]), PertActivity(\"C\", 5.0, 5.0, 5.0, PertActivity[PertActivity(\"A\", 1.0, 2.0, 3.0, PertActivity[]), PertActivity(\"B\", 3.0, 3.0, 3.0, PertActivity[])])], 8.0, 0.0)\n\njulia> result.mean\n8.0\n\njulia> result.stddev\n0.0\n\n\n\n\n\n","category":"method"},{"location":"project/#PERT-Activity","page":"Project Analysis","title":"PERT Activity","text":"","category":"section"},{"location":"project/#OperationsResearchModels.CPM.PertActivity","page":"Project Analysis","title":"OperationsResearchModels.CPM.PertActivity","text":"PertActivity(name::String, o::Float64, m::Float64, p::Float64)::PertActivity\n\nDescription\n\nThe object that represents an activity in PERT (Program Evaluation and Review Technique).\n\nArguments\n\nname::String: The name of the activity.\no::Float64: The optimistic time of the activity.\nm::Float64: The most likely time of the activity.\np::Float64: The pessimistic time of the activity.\ndependencies: The dependencies of the activity in type of Vector{PertActivity}.\n\nExample\n\njulia> A = PertActivity(\"A\", 1, 2, 3);\njulia> B = PertActivity(\"B\", 3, 3, 4);\njulia> C = PertActivity(\"C\", 5, 6, 7, [A, B]);\n\n\n\n\n\n","category":"type"},{"location":"travelingsalesman/#Traveling-Salesman","page":"Traveling Salesman","title":"Traveling Salesman","text":"","category":"section"},{"location":"travelingsalesman/#OperationsResearchModels.TravelingSalesman.travelingsalesman","page":"Traveling Salesman","title":"OperationsResearchModels.TravelingSalesman.travelingsalesman","text":"travelingsalesman(distancematrix::Matrix; popsize = 100, ngen = 1000, pcross = 0.8, pmutate = 0.01, nelites = 1)::TravelinSalesmenResult\n\nGiven a matrix of distances, returns a TravelinSalesmenResult with the best route and its cost.\n\nArguments\n\ndistancematrix::Matrix: a matrix of distances\npopsize::Int: the population size. Default is 100\nngen::Int: the number of generations. Default is 1000\npcross::Float64: the crossover probability. Default is 0.8\npmutate::Float64: the mutation probability. Default is 0.01\nnelites::Int: the number of elites. Default is 1\n\nReturns\n\nTravelinSalesmenResult: a custom data type that holds the best route and its cost\n\nExample\n\npts = Float64[\n    0 0;\n    0 1;\n    0 2;\n    1 2;\n    2 2;\n    3 2;\n    4 2; \n    5 2;\n    5 1;\n    5 0;\n    4 0;\n    3 0;\n    2 0;\n    1 0;\n]\n\nn = size(pts, 1\ndistmat = zeros(n, n)\n\nfor i in 1:n\n    for j in 1:n\n        distmat[i, j] = sqrt(sum((pts[i, :] .- pts[j, :]).^2))\n    end \nend\n\nresult = travelingsalesman(distmat, ngen = 1000, popsize = 100, pcross = 1.0, pmutate = 0.10)\n\n\n\n\n\n","category":"function"},{"location":"transportation/#Transportation-Problem","page":"Transportation","title":"Transportation Problem","text":"","category":"section"},{"location":"transportation/#The-Solver","page":"Transportation","title":"The Solver","text":"","category":"section"},{"location":"transportation/#OperationsResearchModels.Transportation.TransportationProblem","page":"Transportation","title":"OperationsResearchModels.Transportation.TransportationProblem","text":"TransportationProblem\n\nArguments\n\ncosts::Matrix{T}: The cost matrix of the transportation problem.\ndemand::Vector{T}: The demand vector of the transportation problem.\nsupply::Vector{T}: The supply vector of the transportation problem.\n\nDescription\n\nThe TransportationProblem struct represents a transportation problem with a cost matrix, demand vector, and supply vector.\n\n\n\n\n\n","category":"type"},{"location":"transportation/#OperationsResearchModels.solve-Tuple{TransportationProblem}","page":"Transportation","title":"OperationsResearchModels.solve","text":"solve(t, initial = NoInitial)\n\nArguments\n\nt::TransportationProblem: The problem in type of TransportationProblem\ninitial::TransportationResult: The initial solution of the transportation problem (optional). The default is NoInitial.\n\nOutput\n\nTransportationResult: The custom data type that holds problem, solution, and optimum cost. \n\nDescription\n\nSolves a transportation problem given by an object of in type TransportationProblem.\n\ninitial is used to store the initial solution of the transportation problem. Any custom  implementation should take a TransportationProblem and return a TransportationResult object. Currently, northwestcorner and leastcost are implemented as custom initial solutions.\n\nExample\n\njulia> t = TransportationProblem(\n                   [   1 1 1 1; \n                       2 2 2 2; \n                       3 3 3 3], \n                   [100, 100, 100, 100], #Â Demands \n                   [100, 100, 100])      # Supplies \nTransportation Problem:\nCosts: [1 1 1 1; 2 2 2 2; 3 3 3 3]\nDemand: [100, 100, 100, 100]\nSupply: [100, 100, 100]\n\njulia> isbalanced(t)\nfalse\n\njulia> result = solve(t)\nTransportation Results:\nMain problem:\nTransportation Problem:\nCosts: [1 1 1 1; 2 2 2 2; 3 3 3 3]\nDemand: [100, 100, 100, 100]\nSupply: [100, 100, 100]\n\nBalanced problem:\nTransportation Problem:\nCosts: [1 1 1 1; 2 2 2 2; 3 3 3 3; 0 0 0 0]\nDemand: [100, 100, 100, 100]\nSupply: [100, 100, 100, 100]\n\nCost:\n600.0\nSolution:\n[-0.0 -0.0 -0.0 100.0; 100.0 -0.0 -0.0 -0.0; -0.0 -0.0 100.0 -0.0; -0.0 100.0 -0.0 -0.0]\n\n\n\n\n\n","category":"method"},{"location":"transportation/#OperationsResearchModels.Transportation.TransportationResult","page":"Transportation","title":"OperationsResearchModels.Transportation.TransportationResult","text":"TransportationResult(problem, balancedProblem, solution, cost)\n\nArguments\n\nproblem::TransportationProblem: The original transportation problem.\nbalancedProblem::TransportationProblem: The balanced transportation problem.\nsolution::Matrix: The solution matrix of the transportation problem.\ncost::Real: The optimal cost of the transportation problem.\n\nDescription\n\nThe TransportationResult struct represents the result of solving a transportation problem. It contains the original problem, the balanced problem, the solution matrix, and the optimal cost.\n\n\n\n\n\n","category":"type"},{"location":"transportation/#Initial-basic-solutions-for-a-transportation-problem","page":"Transportation","title":"Initial basic solutions for a transportation problem","text":"","category":"section"},{"location":"transportation/#North-west-Corner-Method","page":"Transportation","title":"North-west Corner Method","text":"","category":"section"},{"location":"transportation/#OperationsResearchModels.Transportation.northwestcorner","page":"Transportation","title":"OperationsResearchModels.Transportation.northwestcorner","text":"northwestcorner(a::TransportationProblem)::TransportationResult\n\nDescription\n\nThe northwest corner method is a heuristic for finding an initial basic feasible solution to a transportation problem. It starts at the northwest corner of the cost matrix and allocates as much as possible to the cell, then moves either down or right depending on whether the supply or demand has been met. The method continues until all supply and demand constraints are satisfied.\n\nArguments\n\na::TransportationProblem: The problem in type of TransportationProblem\n\nOutput\n\nTransportationResult: The custom data type that holds problem, solution, and optimum cost.\n\n\n\n\n\n","category":"function"},{"location":"transportation/#The-Least-Cost-Method","page":"Transportation","title":"The Least Cost Method","text":"","category":"section"},{"location":"transportation/#OperationsResearchModels.Transportation.leastcost","page":"Transportation","title":"OperationsResearchModels.Transportation.leastcost","text":"leastcost(a::TransportationProblem)::TransportationResult\n\nDescription\n\nThe least cost method is a heuristic for finding an initial basic feasible solution to a transportation problem. It starts by selecting the cell with the lowest cost and allocating as much as possible to that cell, then it moves to the next lowest cost cell and repeats the process until all supply and demand constraints are satisfied.\n\nArguments\n\na::TransportationProblem: The problem in type of TransportationProblem\n\nOutput\n\nTransportationResult: The custom data type that holds problem, solution, and optimum cost.\n\n\n\n\n\n","category":"function"},{"location":"locationselection/#pmedian","page":"Location Selection","title":"pmedian","text":"","category":"section"},{"location":"locationselection/#OperationsResearchModels.PMedian.pmedian","page":"Location Selection","title":"OperationsResearchModels.PMedian.pmedian","text":"pmedian(data, ncenters)\n\nArguments\n\ndata::Matrix: Coordinates of locations \nncenters::Int: Number of centers \n\nDescription\n\nThe function calculates Euclidean distances between all possible rows of the matrix data.  ncenters locations are then selected that minimizes the total distances to the nearest rows. \n\nOutput\n\nPMedianResult: PMedianResult object. \n\nExample\n\njulia> data1 = rand(10, 2);\n\njulia> data2 = rand(10, 2) .+ 50;\n\njulia> data3 = rand(10, 2) .+ 100;\n\njulia> data = vcat(data1, data2, data3);\n\njulia> result = pmedian(data, 3);\n\njulia> result.centers\n3-element Vector{Int64}:\n  1\n 16\n 21\n\n julia> result.objective\n 11.531012240599605\n\n\n\n\n\n","category":"function"},{"location":"locationselection/#pmedian-with-distances","page":"Location Selection","title":"pmedian with distances","text":"","category":"section"},{"location":"locationselection/#OperationsResearchModels.PMedian.pmedian_with_distances","page":"Location Selection","title":"OperationsResearchModels.PMedian.pmedian_with_distances","text":"pmedian_with_distances(distancematrix, ncenters)\n\nArguments\n\ndistancematrix::Matrix: n x n matrix of distances\nncenters::Int: Number of centers \n\nDescription\n\nncenters locations are selected that minimizes the total distances to the nearest rows. \n\nOutput\n\nPMedianResult: PMedianResult object. \n\n\n\n\n\n","category":"function"},{"location":"","page":"OperationsResearchModels.jl","title":"OperationsResearchModels.jl","text":"(Image: Doc) (Image: status)","category":"page"},{"location":"#OperationsResearchModels.jl","page":"OperationsResearchModels.jl","title":"OperationsResearchModels.jl","text":"","category":"section"},{"location":"","page":"OperationsResearchModels.jl","title":"OperationsResearchModels.jl","text":"A package for Operations Research problems.","category":"page"},{"location":"#Installation","page":"OperationsResearchModels.jl","title":"Installation","text":"","category":"section"},{"location":"","page":"OperationsResearchModels.jl","title":"OperationsResearchModels.jl","text":"julia> ]\n(@v1.xx) pkg> add OperationsResearchModels","category":"page"},{"location":"","page":"OperationsResearchModels.jl","title":"OperationsResearchModels.jl","text":"or ","category":"page"},{"location":"","page":"OperationsResearchModels.jl","title":"OperationsResearchModels.jl","text":"julia> using Pkg\njulia> Pkg.add(\"OperationsResearchModels\")","category":"page"},{"location":"","page":"OperationsResearchModels.jl","title":"OperationsResearchModels.jl","text":"If you want to install latest source that is not registered yet, you can ","category":"page"},{"location":"","page":"OperationsResearchModels.jl","title":"OperationsResearchModels.jl","text":"julia> ]\n(@1.xx) pkg> add https://github.com/jbytecode/OperationsResearchModels.jl","category":"page"},{"location":"","page":"OperationsResearchModels.jl","title":"OperationsResearchModels.jl","text":"but it's not recommended.","category":"page"},{"location":"#Documentation","page":"OperationsResearchModels.jl","title":"Documentation","text":"","category":"section"},{"location":"","page":"OperationsResearchModels.jl","title":"OperationsResearchModels.jl","text":"Please visit The Documentation Page.  This page includes both the API documentation and examples.","category":"page"},{"location":"#Implemented-Problems-and-Algorithms","page":"OperationsResearchModels.jl","title":"Implemented Problems and Algorithms","text":"","category":"section"},{"location":"","page":"OperationsResearchModels.jl","title":"OperationsResearchModels.jl","text":"Assignment Problem\nTransportation Problem\nThe Shortest Path\nMaximum Flow\nMinimum Cost-Flow\nMinimum Spanning Tree\np-median for Location Selection\nCPM - Critical Path Method\nPERT - Project Evaluation and Review Technique\nThe Knapsack Problem\nJohnson's Rule for Flow-Shop Scheduling\nFlow-shop Scheduling using Permutation Encoded Genetic Algorithms (using a Random Key Genetic Algorithm)\nTraveling Salesman with Random Key Genetic Algorithm\nSimplex Method with Real Valued Decision Variables\n2-player zero-sum game solver","category":"page"},{"location":"#How-to-contribute","page":"OperationsResearchModels.jl","title":"How to contribute","text":"","category":"section"},{"location":"","page":"OperationsResearchModels.jl","title":"OperationsResearchModels.jl","text":"Please read the page Contributing before contributing.","category":"page"},{"location":"#Notes-for-the-users","page":"OperationsResearchModels.jl","title":"Notes for the users","text":"","category":"section"},{"location":"","page":"OperationsResearchModels.jl","title":"OperationsResearchModels.jl","text":"The package is implemented for mostly academic purposes. The implementations are not optimized for large-scale problems. The users are encouraged to use the package for educational purposes and small-scale problems. ","category":"page"}]
}
